---
title: "Day 2 Computational Session"
format: html
editor: visual
execute: 
  warning: false
  message: false
---

```{r}
library(tidyverse)
```


# Vectors

```{r}
# Creating a vector
dogs <- c("teddy", "khora", "waffle", "banjo", "tallie")

# Check the class
class(dogs)
```

```{r}
# Creating vector with different classes
cat <- c("creamsicle wolf", 14.2, 3L)

# Vector with different classes is a character bec. it's the most flexible
class(cat)
```

```{r}
# Using typeof() to further check class
years <- c(20, 40, 16, 2)
class(years)
typeof(years)
```

```{r}
# Want to do a conditional check
# is. <<< asks question "is this THIS"
# as. <<< gives command "make this THIS"

#Asking if years numeric
is.numeric(years)

#Asking if years charecter
is.character(years)
```

# Named vector of elements

```{r}
#note this continues to be a 1-D vector
#almost giving a column name to this 
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy feast")
dog_food
dog_food[2]

#can also call things where its looking for that item in the vector
dog_food["khora"]
```

```{r}
cars <- c("blue", "orange", "white")
cars[1]
i <- seq(1:2)
cars[i]

cars[3] <- "y"

```

# Making Vectors Cont. Part 2

```{r}
# Making a matrix with ncol nrow byrow
fish_size <- matrix(c(12, 14, 18, 20), ncol = 2, nrow = 2, byrow = FALSE)

class(fish_size)

fish_size [1,1]
fish_size[2,1]

# What happens if we create a matrix with different types of data?
fish_type <- matrix(c(12, "trout", 18, 13L), ncol = 2, nrow = 2, byrow = FALSE)
class(fish_type)
typeof(fish_type)
fish_type

# Still runs only provides everything in the 2nd row
fish_type[2,]

# Runs provides everything in column 2
fish_type[,1]
```

# Lists 
### Reminder: A list combines vectors that can be of different length and type. 
```{r}
# Creating a list
urchins <- list("blue", c(1,2,3), c("a cat", "a dog", 5L))
urchins

# 1 bracket: If i attempt to call one single element with dataframe[] it returns the item still in list format
ex_1 <- urchins[3]

# 2 brackets: Calls dataframe[[]] calls the elements in vector format
ex_2 <- urchins[[3]]

```

# Making a named list
```{r}
tacos <- list(topping = c("onion",
                          "cilantro",
                          "guacamole"),
              filling = c("beans", "meat", "veggies"),
              price = c(6.75, 8.25, 9.50))

# Now that the list includes names one can list elements by name
tacos

# Index list elements by name
tacos$filling[2]


# ttest
#a <- 
#b <- 
#my_ttest <- t.test(a,b)
#my_ttest
#my_ttest$p.value
```


### Reference code in text 
```{r}
my_list <- list(cats = c(1, 2, 3), dogs = c(10, 104, 12))
#The second value of dogs is 'r my_list$dogs[2]'.

```

# Data Frames 

```{r}
# Making a data frame with vectors 
topping <- c("onion", "cilantro", "guacomole")
filling <- c("beans", "meat", "veggies")
price <- c(6.75, 8.25, 9.50)

# EXAMPLE 1
# dataframename <- data.frame(vector1, vector3)
df_ex_1 <- data.frame(topping, filling, price)

# EXAMPLE 2
#Making a data frame with vectors not stored previously
df_ex_2 <- data.frame(topping =c("sour cream", "salsa", "cheese"),
                      filling = c("chicken", "cheese", "cabbage"),
                      price = c(12.50, 13.75, 15.00))
# EXAMPLE 3
# Using tidyverse data frame tribble( ~column)
#writing data as you expect to see it in the data frame
df_ex_3 <- tribble(
  ~topping, ~filling, ~price,
  "avocado", "steak", 13.25,
  "radish", "fish", 10.40,
  "salsa", "veggies", 9.75
)

df_ex_3
```

# Now indexing from data frames created
```{r}
#Extracting row of price
df_ex_3$price

#Extracting row of price item #3
df_ex_3$price[3]
```








